n = 4;
c = 0;
d = 0;
splaystate = 0;
T = 30000;
dt = 0.005;
for k = 1:10000
    x = 2*pi*(rand(n-1,1)-0.5);
    x = [x; -sum(x)]; % To ensure that the configuration can converge towards [0 0 ... 0]
    y = x;
    for j = 1:T
         y = KurSchritt(y,dt);
    end
    if max(y)>0.1
        splaystate = splaystate+1;
        %disp("Splaystate: "+splaystate/k);
    end
    a1 = KurSchritt(x,dt);
    a2 = KurSchritt(a1,dt);
    a3 = KurSchritt(a2,dt);
    z = 0;
    z1 = 0;
    z2 = 0;
    z = (a1-x)'*x;
    z1 = (a2+x-2*a1)'*x-(a1-x)'*(a1-x);
    for m = 1:n
        z2 = z2-x(m)*((x(m)*x(m))*(a3(m)-3*a2(m)+3*a1(m)-x(m))-5*x(m)*((a1(m)-x(m))*(a2(m)+x(m)-2*a1(m)))+4*(a1(m)-x(m))*((a1(m)-x(m))*(a1(m)-x(m))));
    end
    if z>0 || z1>0
        c = c+1;
        for j = 1:T
            x = KurSchritt(x,dt);
        end
        if max(x)-min(x)<0.1
            d = d+1;
        end
        disp("Indicator positive: "+c/k);
        disp("Failed: "+d/c);
    end
end

function y = KurSchritt(x,dt)
y = x;
n = length(x);
    if n>2
        for i = 2:n-1
            y(i) = x(i)+dt*(sin(x(i-1)-x(i))+sin(x(i+1)-x(i)));
        end
        y(1) = x(1)+dt*(sin(x(length(x))-x(1))+sin(x(2)-x(1)));
        y(n) = x(n)+dt*(sin(x(n-1)-x(n))+sin(x(1)-x(n)));
    elseif n == 2
        a = x(1)+2*dt*sin(x(2)-x(1));
        b = x(2)+2*dt*sin(x(1)-x(2));
        y = [a; b];
    end
end
